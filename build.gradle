plugins {
    // solves the problem with long classpath using JAR instead of classpath on command line
    id "ua.eshepelyuk.ManifestClasspath" version "1.0.0"
}

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

dependencies {
    runtime 'org.scala-lang:scala-library:2.12.3'
    compile 'it.unibo.apice.scafiteam:scafi-core_2.12:0.3.2'
    compile group: 'it.unibo.alchemist', name: 'alchemist', version: '9.3.0'
    compile group: 'it.unibo.alchemist', name: 'alchemist-incarnation-scafi', version: '9.3.0'
}

sourceSets.getByName("main") {
    resources {
        srcDirs("src/main/protelis")
    }
}

task runScafi(type: JavaExec){
    classpath 'src/main/resources'
    classpath sourceSets.main.runtimeClasspath
    main = 'it.unibo.alchemist.Alchemist'
    args(
        "-y", "src/main/resources/scafi.yml",
        "-g", "src/main/resources/example.aes"
    )
    dependsOn(compileJava)
    dependsOn(processResources)
}

task runProtelis(type: JavaExec){
    classpath 'src/main/resources'
    classpath sourceSets.main.runtimeClasspath
    main = 'it.unibo.alchemist.Alchemist'
    args(
        "-y", "src/main/resources/protelis.yml",
        "-g", "src/main/resources/example.aes"
    )
    dependsOn(compileJava)
    dependsOn(processResources)
}

compileJava   {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

compileScala {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}
